package org.muis.core.event;

import java.awt.Point;

import org.muis.core.MuisDocument;
import org.muis.core.MuisElement;

/** An event that occurs when the user performs an action with the mouse over a MUIS element */
public class MouseEvent extends PositionedUserEvent
{
	/** Types of buttons that a user may perform events with */
	public static enum ButtonType
	{
		/** Used for an event that was not generated by a button operation */
		NONE,
		/** Represents the left mouse button */
		LEFT,
		/** Represents the right mouse button */
		RIGHT,
		/** Represents the middle mouse button */
		MIDDLE,
		/** Represents an unrecognized mouse button */
		OTHER;
	}

	/** The types of events that can occur as a {@link MouseEvent} */
	public static enum MouseEventType
	{
		/** Represents the user pressing a mouse button */
		BUTTON_DOWN,
		/** Represents the user releasing a mouse button */
		BUTTON_UP,
		/** Represents the user pressing and releasing a mouse button quickly without moving the mouse pointer */
		BUTTON_CLICKED,
		/** Represents the user moving the mouse pointer while over an element */
		MOUSE_MOVED,
		/** Represents the user moving the mouse pointer into an element */
		MOUSE_ENTERED,
		/** Represents the user moving the mouse pointer out of an element */
		MOUSE_EXITED;
	}

	private final MouseEventType theType;

	private final ButtonType theButtonType;

	private final int theClickCount;

	private java.util.Map<MuisElement, Point> theElementLocations;

	/**
	 * Creates a mouse event
	 *
	 * @param doc The document that the mouse event occurred in
	 * @param element The deepest-level element that the mouse event occurred over
	 * @param type The type of event that this represents
	 * @param docX The absolute x-coordinate of the event relative to the document's root element
	 * @param docY The absolute y-coordinate of the event relative to the document's root element
	 * @param buttonType The type of the button that caused this mouse event
	 * @param clickCount The number of clicks in quick succession that caused this mouse event
	 */
	public MouseEvent(MuisDocument doc, MuisElement element, MouseEventType type, int docX, int docY, ButtonType buttonType, int clickCount)
	{
		super(MuisElement.MOUSE_EVENT, doc, element, docX, docY);
		theType = type;
		theButtonType = buttonType;
		theClickCount = clickCount;
		theElementLocations = new java.util.HashMap<>();
	}

	/**
	 * @param element The element
	 * @param p The location of this event over the element
	 */
	public void addElementLocation(MuisElement element, Point p)
	{
		theElementLocations.put(element, p);
	}

	/**
	 * @param element The element
	 * @return The location of this event over the element
	 */
	public Point getPosition(MuisElement element)
	{
		return theElementLocations.get(element);
	}

	/** @return The type of this mouse event */
	public MouseEventType getMouseEventType()
	{
		return theType;
	}

	/** @return The button that caused this event */
	public ButtonType getButtonType()
	{
		return theButtonType;
	}

	/** @return The number of clicks in quick succession that caused this event */
	public int getClickCount()
	{
		return theClickCount;
	}
}
