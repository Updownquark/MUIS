<?xml version="1.0" encoding="UTF-8"?>

<!-- Model Value Expressions parsing grammar -->
<grammar>
	<!-- Self-contained types -->
	<entity name="char" order="1" impl="prisms.lang.types.ParsedChar">
		<literal>&apos;</literal>
		<whitespace type="forbid" />
		<select>
			<option>
				<charset pattern="[\x20-~]" storeAs="value">
					<exclude>&apos;</exclude>
				</charset>
			</option>
			<option>
				<literal storeAs="value">\[&apos;tnrb]</literal>
			</option>
			<option>
				<charset pattern="\\u[0-9]{4}" storeAs="value" />
			</option>
		</select>
		<whitespace type="forbid" />
		<literal>&apos;</literal>
	</entity>
	<entity name="string" order="1" impl="prisms.lang.types.ParsedString">
		<select>
			<option>
				<literal>&quot;</literal>
				<charset storeAs="value" pattern=".*">
					<exclude escape="\&quot;">&quot;</exclude>
				</charset>
			</option>
			<option>
				<literal>`</literal>
				<charset storeAs="value" pattern=".*">
					<exclude escape="\&quot;">&quot;</exclude>
				</charset>
				<literal>`</literal>
			</option>
		</select>
	</entity>
	<entity name="number" order="2" impl="prisms.lang.types.ParsedNumber">
		<option>
			<literal storeAs="neg">-</literal>
		</option>
		<select>
			<option>
				<charset pattern="[0-9][_0-9]*" storeAs="integer" />
				<whitespace type="forbid" />
				<literal>.</literal>
				<option>
					<whitespace type="forbid" />
					<charset pattern="[0-9][_0-9]*" storeAs="fractional" />
				</option>
			</option>
			<option>
				<literal>.</literal>
				<whitespace type="forbid" />
				<charset pattern="[0-9][_0-9]*" storeAs="fractional" />
			</option>
			<option>
				<charset pattern="[1-9][_0-9]*" storeAs="integer" />
			</option>
			<option>
				<literal storeAs="integer">0</literal>
			</option>
		</select>
		<option>
			<literal pattern="[eE]" />
			<option>
				<literal storeAs="expNeg">-</literal>
			</option>
			<charset pattern="[1-9][_0-9]*" storeAs="exp" />
		</option>
		<option>
			<literal pattern="[fF]" storeAs="floatType" />
			<forbid>
				<whitespace type="forbid" />
				<charset pattern="[_a-zA-Z0-9]" />
			</forbid>
		</option>
		<option>
			<literal pattern="[lL]" storeAs="longType" />
			<forbid>
				<whitespace type="forbid" />
				<charset pattern="[_a-zA-Z0-9]" />
			</forbid>
		</option>
	</entity>
	<entity name="hex int" order="1" impl="prisms.lang.types.ParsedNumber">
		<literal storeAs="hex">0x</literal>
		<whitespace type="forbid" />
		<charset pattern="[_0-9a-fA-F]+" storeAs="value" />
		<option>
			<literal pattern="[lL]" storeAs="longType" />
		</option>
		<forbid>
			<whitespace type="forbid" />
			<charset pattern="[_a-zA-Z0-9]" />
		</forbid>
	</entity>
	<entity name="octal int" order="1" impl="prisms.lang.types.ParsedNumber">
		<literal storeAs="oct">0</literal>
		<whitespace type="forbid" />
		<charset pattern="[_0-9]+" storeAs="value" />
		<option>
			<literal pattern="[lL]" storeAs="longType" />
			<forbid>
				<whitespace type="forbid" />
				<charset pattern="[_a-zA-Z0-9]" />
			</forbid>
		</option>
	</entity>
	<entity name="binary int" order="1" impl="prisms.lang.types.ParsedNumber">
		<literal storeAs="binary">0b</literal>
		<whitespace type="forbid" />
		<charset pattern="[_0-9]*" storeAs="value" />
		<option>
			<literal pattern="[lL]" storeAs="longType" />
			<forbid>
				<whitespace type="forbid" />
				<charset pattern="[_a-zA-Z0-9]" />
			</forbid>
		</option>
	</entity>
	<entity name="boolean" order="1" impl="prisms.lang.types.ParsedBoolean">
		<select>
			<option>
				<charset pattern="[_a-zA-Z][_a-zA-Z0-9]*" storeAs="value">
					<match>true</match>
				</charset>
			</option>
			<option>
				<charset pattern="[_a-zA-Z][_a-zA-Z0-9]*" storeAs="value">
					<match>false</match>
				</charset>
			</option>
		</select>
	</entity>
	<entity name="null" order="1" impl="prisms.lang.types.ParsedNull">
		<charset pattern="[_a-zA-Z][_a-zA-Z0-9]*">
			<match>null</match>
		</charset>
	</entity>
	<entity name="placeholder" order="1000" impl="org.quick.core.parser.ParsedPlaceHolder">
		<literal>?&lt;</literal>
		<charset pattern="[0-9a-f]+" storeAs="name" />
		<literal>&gt;</literal>
	</entity>

	<!-- Literal initialized, bounded operators -->
	<operator name="constructor" order="1" impl="prisms.lang.types.ParsedConstructor">
		<literal>new</literal>
		<whitespace />
		<op storeAs="type" type="type" />
		<literal>(</literal>
		<option>
			<op storeAs="argument" />
			<option min="0">
				<literal>,</literal>
				<op storeAs="argument" />
			</option>
		</option>
		<literal>)</literal>
	</operator>
	<operator name="array initializer" order="1" impl="prisms.lang.types.ParsedArrayInitializer">
		<literal>new</literal>
		<whitespace />
		<op storeAs="type" type="type" />
		<select>
			<option>
				<option min="1">
					<literal storeAs="startDimension">[</literal>
					<option>
						<op storeAs="size" />
					</option>
					<literal storeAs="endDimension">]</literal>
				</option>
			</option>
			<option>
				<literal storeAs="valueSet">{</literal>
				<option>
					<op storeAs="element" />
					<option min="0">
						<literal>,</literal>
						<op storeAs="element" />
					</option>
				</option>
				<literal>}</literal>
			</option>
		</select>
	</operator>

	<!-- Literal initialized, unbounded operators -->

	<!-- Specifically initialized types -->
	<operator name="function" order="1000" impl="prisms.lang.types.ParsedMethod">
		<op type="identifier" storeAs="name" />
		<literal storeAs="method">(</literal>
		<option>
			<op storeAs="parameter" />
			<option min="0">
				<literal>,</literal>
				<op storeAs="parameter" />
			</option>
		</option>
		<literal>)</literal>
	</operator>

	<entity name="primitive" order="998" impl="prisms.lang.types.ParsedKeyword">
		<charset pattern="[_a-zA-Z][_a-zA-Z0-9]*" storeAs="name">
			<match>void</match>
			<match>null</match>
			<match>boolean</match>
			<match>true</match>
			<match>false</match>
			<match>char</match>
			<match>byte</match>
			<match>short</match>
			<match>int</match>
			<match>long</match>
			<match>float</match>
			<match>double</match>
		</charset>
	</entity>
	<entity name="identifier" order="1000" impl="prisms.lang.types.ParsedIdentifier">
		<charset pattern="[_a-zA-Z][_a-zA-Z0-9]*" storeAs="name" />
	</entity>
	<entity name="basic type" priority="-1" impl="prisms.lang.types.ParsedType">
		<op type="identifier|primitive" storeAs="name" />
		<option min="0">
			<literal>.</literal>
			<op type="identifier|primitive" storeAs="name" />
		</option>
	</entity>
	<entity name="quick-identifier" order="999" impl="prisms.lang.types.ParsedIdentifier">
		<charset pattern="[_a-zA-Z][_\-a-zA-Z0-9]*" storeAs="name" />
	</entity>
	<entity name="type" priority="-1" impl="prisms.lang.types.ParsedType">
		<option> <!-- Normal java type -->
			<op type="basic type" storeAs="base" />
			<option min="0">
				<literal storeAs="array">[</literal>
				<literal>]</literal>
			</option>
		</option>
		<option> <!-- Quick-type namespace-qualified tag type -->
			<op type="quick-type" storeAs="base" />
		</option>
	</entity>
	<entity name="quick-type" priority="0" impl="prisms.lang.types.ParsedType">
		<!-- Quick-type namespace-qualified tag type.  Capture this separately so we can assign higher priority to override subtraction. -->
		<option>
			<op type="quick-identifier" storeAs="namespace" />
			<literal>:</literal>
		</option>
		<op type="quick-identifier" storeAs="base" />
	</entity>

	<!-- Operators with defined priorities -->

	<!-- Ternary conditional -->
	<operator name="conditional" order="50" priority="110" impl="prisms.lang.types.ParsedConditional">
		<op storeAs="condition" />
		<literal>?</literal>
		<op storeAs="affirmative" />
		<literal>:</literal>
		<op storeAs="negative" />
	</operator>

	<!-- Logical -->
	<operator name="or" order="50" priority="120" impl="prisms.lang.types.ParsedBinaryOp">
		<op />
		<literal storeAs="name">||</literal>
		<op />
	</operator>
	<operator name="and" order="50" priority="130" impl="prisms.lang.types.ParsedBinaryOp">
		<op />
		<literal storeAs="name">&amp;&amp;</literal>
		<op />
	</operator>

	<!-- Bitwise -->
	<operator name="binary or" order="50" priority="140" impl="prisms.lang.types.ParsedBinaryOp">
		<op />
		<literal storeAs="name">|</literal>
		<op />
	</operator>
	<operator name="binary xor" order="50" priority="150" impl="prisms.lang.types.ParsedBinaryOp">
		<op />
		<literal storeAs="name">^</literal>
		<op />
	</operator>
	<operator name="binary and" order="50" priority="160" impl="prisms.lang.types.ParsedBinaryOp">
		<op />
		<literal storeAs="name">&amp;</literal>
		<op />
	</operator>

	<!-- Equality -->
	<operator name="equal" order="50" priority="170" impl="prisms.lang.types.ParsedBinaryOp">
		<op />
		<literal storeAs="name">==</literal>
		<op />
	</operator>
	<operator name="not equal" order="50" priority="170" impl="prisms.lang.types.ParsedBinaryOp">
		<op />
		<literal storeAs="name">!=</literal>
		<op />
	</operator>

	<!-- Comparison -->
	<operator name="instanceof" order="50" priority="180" impl="prisms.lang.types.ParsedInstanceofOp">
		<op storeAs="variable" />
		<literal>instanceof</literal>
		<op type="type" storeAs="type" />
	</operator>
	<operator name="less than" order="50" priority="180" impl="prisms.lang.types.ParsedBinaryOp">
		<op />
		<literal storeAs="name">&lt;</literal>
		<op />
	</operator>
	<operator name="less than equal" order="50" priority="180" impl="prisms.lang.types.ParsedBinaryOp">
		<op />
		<literal storeAs="name">&lt;=</literal>
		<op />
	</operator>
	<operator name="greater than" order="50" priority="180" impl="prisms.lang.types.ParsedBinaryOp">
		<op />
		<literal storeAs="name">&gt;</literal>
		<op />
	</operator>
	<operator name="greater than equal" order="50" priority="180" impl="prisms.lang.types.ParsedBinaryOp">
		<op />
		<literal storeAs="name">&gt;=</literal>
		<op />
	</operator>

	<!-- Shift -->
	<operator name="left shift" order="50" priority="190" impl="prisms.lang.types.ParsedBinaryOp">
		<op />
		<literal storeAs="name">&lt;&lt;</literal>
		<op />
	</operator>
	<operator name="right shift" order="50" priority="190" impl="prisms.lang.types.ParsedBinaryOp">
		<op />
		<literal storeAs="name">&gt;&gt;</literal>
		<op />
	</operator>
	<operator name="unsigned right shift" order="50" priority="190" impl="prisms.lang.types.ParsedBinaryOp">
		<op />
		<literal storeAs="name">&gt;&gt;&gt;</literal>
		<op />
	</operator>

	<!-- Additive -->
	<operator name="add" order="50" priority="200" impl="prisms.lang.types.ParsedBinaryOp">
		<op />
		<literal storeAs="name">+</literal>
		<op />
	</operator>
	<operator name="subtract" order="50" priority="200" impl="prisms.lang.types.ParsedBinaryOp">
		<op />
		<literal storeAs="name">-</literal>
		<op />
	</operator>

	<!-- Multiplicative -->
	<operator name="multiply" order="50" priority="210" impl="prisms.lang.types.ParsedBinaryOp">
		<op />
		<literal storeAs="name">*</literal>
		<op />
	</operator>
	<operator name="divide" order="50" priority="210" impl="prisms.lang.types.ParsedBinaryOp">
		<op />
		<literal storeAs="name">/</literal>
		<op />
	</operator>
	<operator name="modulo" order="50" priority="210" impl="prisms.lang.types.ParsedBinaryOp">
		<op />
		<literal storeAs="name">%</literal>
		<op />
	</operator>
	<operator name="percent" order="50" priority="210" impl="org.quick.core.eval.impl.ParsedPercent">
		<op storeAs="value" />
		<literal storeAs="name">%</literal>
	</operator>

	<!-- Unary pre -->
	<operator name="posit" order="50" priority="220" impl="prisms.lang.types.ParsedUnaryOp">
		<literal storeAs="name">+</literal>
		<op />
	</operator>
	<operator name="negate" order="50" priority="220" impl="prisms.lang.types.ParsedUnaryOp">
		<literal storeAs="name">-</literal>
		<op />
	</operator>
	<operator name="not" order="50" priority="220" impl="prisms.lang.types.ParsedUnaryOp">
		<literal storeAs="name">!</literal>
		<op />
	</operator>
	<operator name="binary not" order="50" priority="220" impl="prisms.lang.types.ParsedUnaryOp">
		<literal storeAs="name">~</literal>
		<op />
	</operator>
	<operator name="cast" order="50" priority="220" impl="prisms.lang.types.ParsedCast">
		<literal>(</literal>
		<op storeAs="type" type="type" />
		<option min="0">
			<literal storeAs="array">[</literal>
			<literal>]</literal>
		</option>
		<literal>)</literal>
		<op storeAs="value" />
	</operator>

	<!-- Others -->
	<operator name="parenthetic" order="50" priority="250" impl="prisms.lang.types.ParsedParenthetic">
		<literal>(</literal>
		<op storeAs="content" />
		<literal>)</literal>
	</operator>
	<operator name="array index" order="50" priority="250" impl="prisms.lang.types.ParsedArrayIndex">
		<op storeAs="array" />
		<literal storeAs="open bracket">[</literal>
		<op storeAs="index" />
		<literal>]</literal>
	</operator>
	<operator name="member" order="50" priority="250" impl="prisms.lang.types.ParsedMethod">
		<op storeAs="context" />
		<literal storeAs="dot">.</literal>
		<select>
			<option>
				<op type="identifier" storeAs="name" />
			</option>
			<option>
				<literal storeAs="name">class</literal>
			</option>
			<option>
				<literal storeAs="name">this</literal>
			</option>
		</select>
	</operator>
	<operator name="member method" order="50" priority="250" impl="prisms.lang.types.ParsedMethod">
		<op storeAs="context" />
		<literal storeAs="dot">.</literal>
		<op type="identifier" storeAs="name" />
		<literal storeAs="method">(</literal>
		<option>
			<op storeAs="parameter" />
			<option min="0">
				<literal>,</literal>
				<op storeAs="parameter" />
			</option>
		</option>
		<literal>)</literal>
	</operator>
	<operator name="unit value" order="50" priority="250" impl="org.quick.core.parser.PrismsPropertyParser$ParsedUnitValue">
		<op storeAs="value" />
		<charset storeAs="unit" pattern="[a-zA-Z!@%~_][a-zA-Z0-9!@%~_]*" />
	</operator>
</grammar>
